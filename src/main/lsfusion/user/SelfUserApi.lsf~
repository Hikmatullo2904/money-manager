MODULE SelfUserApi;

REQUIRE SelfUser, UtilResponse, Time, UtilString, Account;


password = DATA LOCAL STRING ();
email = DATA LOCAL STRING ();
firstName = DATA LOCAL STRING ();
lastName = DATA LOCAL STRING ();

selfUser = DATA LOCAL SelfUser();

isEmail(STRING email) = contains('@', email);


FORM regiterRequestForm
    PROPERTIES() password, email, firstName, lastName
;

login(FILE f) {
    IMPORT JSON FROM f TO() password, email;
    selfUser() <- findByEmail(email());
    IF NOT selfUser() THEN {
        returnError(102);
        RETURN ;
    }
    calculateBase64Hash('SHA-256', password());
    IF NOT calculatedHash() == sha256Password(selfUser()) THEN {
        returnError(102);
        RETURN ;
    }
    generateAuthToken(login(selfUser()));
    EXPORT JSON FROM token = resultAuthToken();
}@@noauth;

register(FILE f) {
    IMPORT regiterRequestForm JSON FROM f;
    
    IF NOT (password() AND email() AND firstName() AND lastName()) THEN {
        returnError(405);
        RETURN;
    }
    
    IF findByEmail(email()) THEN {
        returnError(101);
        RETURN ;
    }
    IF NOT isEmail(email()) THEN {
        returnError('Please provide valid email');
        RETURN ;
    }
    
    
    
    NEW su = SelfUser {
        email(su) <- email();
        firstName(su) <- firstName();
        lastName(su) <- lastName();
        setSHA256Password(su, password());
        createdAt(su) <- currentDateTime();
        status(su) <- SelfUserStatus.verified; 
        login(su) <- email();
        selfUser() <- su;
        role(su) <- Role.user;
    }
    
    NEW a = Account {
        name(a) <- 'Main';
        currency(a) <- 'SUM';
        balance(a) <- 0;
        user(a) <- selfUser();
    }
    APPLY ;
    
    returnSuccessResponse();
    
}@@noauth;

FORM meResponseForm
    OBJECTS data = SelfUser
    PROPERTIES(data) firstName, lastName, email, createdAt
;

me() {
    selfUser() <- currentUser();
    IF NOT selfUser() THEN {
        returnError(401);
        RETURN ;
    }
    EXPORT meResponseForm OBJECTS data = selfUser() JSON;
    
}