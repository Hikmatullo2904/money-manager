MODULE IncomeExpenseReportApi;

REQUIRE IncomeExpenseReports, UtilResponse;

accountId = DATA LOCAL LONG();
currencyId = DATA LOCAL LONG();

FORM incomeExpenseReportResponse
    PROPERTIES() startDate, endDate
    PROPERTIES income(), expense()
;

getIncomeExpenseStatistics(FILE f) {
    IMPORT JSON FROM f TO() startDate, endDate, accountId, currencyId;
    IF NOT startDate() OR NOT endDate() THEN {
        returnError(405);
        RETURN;
    }
    
    IncomeExpenseReports.account() <- accountById(accountId(), currentUser() AS CustomUser);
    
    IncomeExpenseReports.currency() <- currencyById(currencyId());
    IF NOT IncomeExpenseReports.currency() THEN {
        IncomeExpenseReports.currency() <- Currency.uzs;
    }
    
    initCurrencyConvertor();
    EXPORT incomeExpenseReportResponse JSON;
} @@api;



calculateAmountCategory(Category c) = GROUP SUM(totalAmountInSelectedCurrency(Transaction t)) IF
    user(t) == currentUser()
    AND toDate(createdAt(t)) >= startDate()
    AND toDate(createdAt(t)) <= endDate()
    AND category(t) == c
    AND (NOT IncomeExpenseReports.account() OR account(t) == IncomeExpenseReports.account())
;

amountInCategory(Category c) = OVERRIDE calculateAmountCategory(c), 0;

FORM categoryStatisticsResponse
    OBJECTS data = Category
    PROPERTIES name = name(data),
    amount = amountInCategory(data)

    FILTERS user(data) == currentUser() AND type(data) == transactionType()
;



getCategoryStatistics(FILE f) {
    LOCAL type = STRING();
    IMPORT JSON FROM f TO() startDate, endDate, type, accountId, currencyId;
    IF type() == 'expense' THEN {
        transactionType() <- TransactionType.expense;
    }ELSE IF type() == 'income' THEN {
        transactionType() <- TransactionType.income;
    }
    IF NOT startDate() OR NOT endDate() OR NOT transactionType() THEN {
        returnError(405);
        RETURN;
    }
    
    IncomeExpenseReports.account() <- accountById(accountId(), currentUser() AS CustomUser);
    
    IncomeExpenseReports.currency() <- currencyById(currencyId());
    IF NOT IncomeExpenseReports.currency() THEN {
        IncomeExpenseReports.currency() <- Currency.uzs;
    }
    initCurrencyConvertor();
    EXPORT categoryStatisticsResponse JSON;
} @@api;


FORM monthlyStatistisResponse
    OBJECTS data = INTEGER
    PROPERTIES month = monthName(months(data)), 
    income = incomeMonth(months(data)), 
    expense = expenseMonth(months(data))
    FILTERS imported(data)
;

getMonthlyStatistics(FILE f) {
    IMPORT JSON FROM f TO() accountId, currencyId;
    IncomeExpenseReports.account() <- accountById(accountId(), currentUser() AS CustomUser);
    IncomeExpenseReports.currency() <- currencyById(currencyId());
    IF NOT IncomeExpenseReports.currency() THEN {
        IncomeExpenseReports.currency() <- Currency.uzs;
    }
    initCurrencyConvertor();
    fillMonths();
    EXPORT monthlyStatistisResponse JSON;
} @@api;

minIncomeInCurrentMonth() = GROUP SUM totalAmountRecurringTransaction(RecurringTransactions r) IF user(r) == currentUser()
    AND extractMonthNumber(nextDate(r)) == currentMonth()
    AND extractYear(nextDate(r)) == currentYear()
    AND type(r) == TransactionType.income
    AND (NOT IncomeExpenseReports.account() OR account(r) == IncomeExpenseReports.account());

minExpenseInCurrentMonth() = GROUP SUM totalAmountRecurringTransaction(RecurringTransactions r) IF 
    user(r) == currentUser()
    AND extractMonthNumber(nextDate(r)) == currentMonth()
    AND extractYear(nextDate(r)) == currentYear()
    AND type(r) == TransactionType.expense
    AND (NOT IncomeExpenseReports.account() OR account(r) == IncomeExpenseReports.account());

minExpense() = OVERRIDE minExpenseInCurrentMonth(), 0;
minIncome() = OVERRIDE minIncomeInCurrentMonth(), 0;

FORM minExpenseAndIncomeInCurrentMonth
    PROPERTIES minExpense = minExpense(),
        minIncome = minIncome();
;
getMinExpenseAndIncomeInCurrentMonth(FILE f) {
    IMPORT JSON FROM f TO() currencyId, accountId;
    IncomeExpenseReports.account() <- accountById(accountId(), currentUser() AS CustomUser);
    IncomeExpenseReports.currency() <- currencyById(currencyId());
    IF NOT IncomeExpenseReports.currency() THEN {
        IncomeExpenseReports.currency() <- Currency.uzs;
    }
    EXPORT minExpenseAndIncomeInCurrentMonth JSON;
} @@api;


